version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
    networks:
      - miniflix-network
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    environment:
      - NODE_ENV=production
      - PORT=8000
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USER=miniflix
      - DB_PASSWORD=miniflix_password
      - DB_NAME=miniflix
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=miniflix-secure-jwt-secret-key
      - JWT_EXPIRES_IN=1d
      - STORAGE_PATH=/app/storage
    volumes:
      - storage-data:/app/storage
    networks:
      - miniflix-network
    restart: unless-stopped

  db:
    image: mysql:8.0.35
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=miniflix
      - MYSQL_USER=miniflix
      - MYSQL_PASSWORD=miniflix_password
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - miniflix-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  redis:
    image: redis:7.2.6-alpine3.20
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    networks:
      - miniflix-network
    restart: unless-stopped

networks:
  miniflix-network:
    driver: bridge

volumes:
  mysql-data:
  redis-data:
  storage-data: 